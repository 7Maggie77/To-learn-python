#!/usr/bin/python
#-*-coding:utf-8-*
import math

'''一元二次方程求解
def quadratic(a,b,c):
	if(delta>0):
		x1 = (-b+math.sqrt(delta))/(2*a)
		x2 = (-b-math.sqrt(delta))/(2*a)
		print('x1=%f x2=%f' % (x1,x2))	
	elif(delta==0):
		x=-(b/2*a)
		print('x1=x2=%f' % x)
	else:
		print('no!')
	


a=int(input('输入a参数：'))
b=int(input('输入b参数：'))
c=int(input('输入c参数：'))

delta= b**2-4*a*c
quadratic(a,b,c)
'''



'''多数相乘
#初始代码（当传入为空时测试失败）
def product(x,*num):
	a=1
	for n in num:
		a*=n
	return a

#修改后的代码
def product(x,*num):
	for n in num:
		x*=n
	return x

# 测试
print('product(5) =', product(5))
print('product(5, 6) =', product(5, 6))
print('product(5, 6, 7) =', product(5, 6, 7))
print('product(5, 6, 7, 9) =', product(5, 6, 7, 9))
if product(5) != 5:
    print('测试失败!')
elif product(5, 6) != 30:
    print('测试失败!')
elif product(5, 6, 7) != 210:
    print('测试失败!')
elif product(5, 6, 7, 9) != 1890:
    print('测试失败!')
else:
    try:
        product()
        print('测试失败!')
    except TypeError:
        print('测试成功!')
'''

	
'''汉诺塔
我一开始很难理解move里面4个参数的意思和相互之间的关系
 后来发现move(n,a,b,c)可以翻译成：
 把n个盘子，借助b(第3个参数)，从a(第2个参数)移到c(第4个参数)

'''
def move(n, a, b, c): 
     if n == 1:   # 如果a只有1盘子
         print(a, '-->', c);   # 直接把盘子从a移到c
     else:   # 如果a有n个盘子(n > 1)，那么分三步
         move(n-1, a, c, b)   # 先把上面n-1个盘子，借助c，从a移到b
         move(1, a, b, c)   # 再把最下面的1个盘子，借助b，从a移到c
         move(n-1, b, a, c)   # 最后把n-1个盘子，借助a，从b移到c

move(3,'A','B','C')  # 测试


